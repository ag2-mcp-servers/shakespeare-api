# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T19:18:52+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity

app = MCPProxy(
    contact={
        'name': 'Fun Generators',
        'url': 'http://fungenerators.com/api/shakespeare/',
    },
    description='Shakespeare API. Generate random Shakespeare quotes, names, insults, lorem ipsum etc. Translate normal English to Shakespeare English.  [Click here to subscribe](http://fungenerators.com/api/shakespeare/) \n',
    termsOfService='https://fungenerators.com/terms',
    title='Shakespeare API',
    version='1.5',
    servers=[
        {'url': 'http://api.fungenerators.com'},
        {'url': 'https://api.fungenerators.com'},
    ],
)


@app.get(
    '/shakespeare/generate/insult',
    description=""" Generate random Shakespeare style insults. """,
    tags=['shakespearean_text_creation'],
    security=[
        APIKeyHeader(name="X-Fungenerators-Api-Secret"),
    ],
)
def get_shakespeare_generate_insult(limit: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/shakespeare/generate/lorem-ipsum',
    description=""" Generate Shakespeare lorem ipsum. """,
    tags=['shakespearean_text_creation'],
    security=[
        APIKeyHeader(name="X-Fungenerators-Api-Secret"),
    ],
)
def get_shakespeare_generate_lorem_ipsum(
    type: Optional[str] = None, limit: Optional[int] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/shakespeare/generate/name',
    description=""" Generate random Shakespearen names. """,
    tags=['shakespearean_text_creation'],
    security=[
        APIKeyHeader(name="X-Fungenerators-Api-Secret"),
    ],
)
def get_shakespeare_generate_name(
    variation: Optional[str] = None, limit: Optional[int] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/shakespeare/quote',
    description=""" Get a random Shakespeare quote. """,
    tags=['shakespearean_text_creation'],
    security=[
        APIKeyHeader(name="X-Fungenerators-Api-Secret"),
    ],
)
def get_shakespeare_quote():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/shakespeare/translate',
    description=""" Translate from English to Shakespeare English. """,
    tags=['shakespearean_text_creation', 'shakespearean_text_translation'],
    security=[
        APIKeyHeader(name="X-Fungenerators-Api-Secret"),
    ],
)
def get_shakespeare_translate(text: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
